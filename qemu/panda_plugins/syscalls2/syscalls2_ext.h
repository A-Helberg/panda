
#ifndef __SYSCALLS2_EXT_H__
#define __SYSCALLS2_EXT_H__

/*
 * DO NOT MODIFY. This file is automatically generated by scripts/apigen.py,
 * based on the <plugin>_int.h file in your plugin directory.
 */

#include <dlfcn.h>
#include "panda_plugin.h"

typedef void (*pre_exec_callback_t)(CPUState*, target_ulong);

typedef void(*registerExecPreCallback_t)(pre_exec_callback_t callback);
static registerExecPreCallback_t __registerExecPreCallback = NULL;
static inline void registerExecPreCallback(pre_exec_callback_t callback)
{
    return __registerExecPreCallback(callback);
}

typedef target_long(*get_return_val_t)(CPUState *env);
static get_return_val_t __get_return_val = NULL;
static inline target_long get_return_val(CPUState* env)
{
    return __get_return_val(env);
}

#define API_PLUGIN_NAME "syscalls2"
#define IMPORT_PPP(module, func_name) { \
 __##func_name = (func_name##_t) dlsym(module, #func_name); \
 char *err = dlerror(); \
 if (err) { \
    printf("Couldn't find %s function in library %s.\n", #func_name, API_PLUGIN_NAME); \
    printf("Error: %s\n", err); \
    return false; \
 } \
}

static inline bool init_syscalls2_api(void);
static inline bool init_syscalls2_api(void)
{
    void *module = panda_get_plugin_by_name("panda_" API_PLUGIN_NAME ".so");
    if (!module) {
        printf("In trying to add plugin, couldn't load %s plugin\n", API_PLUGIN_NAME);
        return false;
    }
    dlerror();
    IMPORT_PPP(module, registerExecPreCallback)
    IMPORT_PPP(module, get_return_val)
    return true;
}
#undef API_PLUGIN_NAME
#undef IMPORT_PPP

#endif
